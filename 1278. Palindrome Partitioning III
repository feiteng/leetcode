class Solution {
    public int palindromePartition(String s, int k) {
        int n = s.length();
        int[][] f = new int[n + 1][k + 1];
        for(int[] row : f)
        {
            Arrays.fill(row, -1);
        }
        return dp(s.toCharArray(), 0, k, f);
    }
    
    int dp(char[] chars, int pos, int k, int[][] f)
    {
        int ans = 1 << 30, n = chars.length;
        if(k == 1)
        {
            return makePalin(chars, pos, n - 1);
        }
        if(f[pos][k] >= 0) return f[pos][k];
        
        for(int i = pos; i <= n - k; i++)
        {
            int cur = makePalin(chars, pos, i) + dp(chars, i + 1, k - 1, f);
            ans = Math.min(ans, cur);
        }
        return f[pos][k] = ans;        
    }
    
    int makePalin(char[] chars, int from, int to)
    {
        int i = from, j = to;
        int re = 0;
        while(i < j)
        {
            if(chars[i] != chars[j]) re++;
            i++;
            j--;
        }
        return re;
    }
}
